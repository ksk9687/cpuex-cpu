SRAM解説



SRAMチップの概要

GS8160Z18BGT-150というチップ
基本的な使い方は旧基板と同じ
	制御線に、常時使えるように信号を流して、
	決められた周波数以下のクロックを流し込む
	read/writeと、アドレスを指定して、
	決められたクロック後にバスに読み書きをする

「SRAMチップは2つ独立に存在しているけど、read/writeを制御する線が基板上で同じ線になっているから、別々に使うのはやめた方がいいわ」


2つのモード

新基板には2つのモードがある
	Pipelineモード
	Flow Through(FT)モード
Pipelineモード
	クロックに150MHzまで入れられるが、
	読み出し・書き出しサイクルが2クロック
	つまり、全体のクロックが速いけど、キャッシュミスのダメージが2クロック
FTモード
	クロックに133MHzまでしか入れられないが、
	読み出し・書き出しサイクルが1クロック
	つまり、キャッシュミスのダメージが1クロックだけだけど、全体のクロックが遅い

Pipelineモード
(Pipelineモードの図、概要が分かればいいです。)

FTモード
(FTモードの図、概要が分かればいいです。)

とまあ、こうやればいいとデータシートに書かれているが

こ れ で は 動 か な い (バーンと出してね)

速いクロックだと、read時に、バスから出てくるデータが遅れてくることがある

-> そこで、バスから出ている信号は、その後もしばらく出続けていることを利用する

SRAMモジュールの作り方
	基本的に、外部から伸びているinoutを使うときは、ラッチを挟みましょう
		遅くなるが、挟まないと不安定になることがある
	逆位相を使うのがお勧め
		(逆位相の図、適当に配置と配色をいじってください。)
	では逆位相を利用するには具体的にどうすればいいか？
		なんと、逆位相を使っていないソースを書いて、SRAMに入れているクロックを逆位相のものに切り替えるだけでOK！

ちょっとしたTips
	SRAMでreadして、データが帰ってくるときに、アドレスやreadするときに一緒に入れた情報を出力してやると、後の処理が書きやすくなる


