This file is written in UTF-8

RS232C モジュール及びシミュレーションモジュール

[注意]
制御線は使っていません。なので、データがどんどん流れ込んで、バッファオーバーランします。
また、read側のバッファはわざと分散RAMにしています。
read側はバッファオーバーランを検知する線を残しておきます。

genericに対応しました。

なお、入江さんから借りたシリアル<->USB変換モジュールでは、460800までしか出ませんでした。最速の921600は、FPGA側でデータが取得できましたが、PC側がデータを取得できないようです。
あと、めんどかったので、バッファの読み書きのクロックと、送信・受信に使うクロックを同一にしています。なんだったら分離してください。

[動作設定]
ビットのエンディアン:あれ、どっちだ？たぶんリトルエンディアンになっている気がするが。
速度:460800
制御線:使用しない
パリティ:なし
データビット:8bit
ストップビット:1bit

[ファイル]
rs232cio1.vhd : RS232C モジュール
	rs232cio1_read.vhd : サブモジュール
	rs232cio1_write.vhd : サブモジュール

rs232c_test.vhd : 上を使ったechoモジュール

rs232ctb2.vhd : シミュレーションモジュール

他のファイルはあくまで参考
上のファイル群中での文字コードはSJISです。(ISEがそれで動くんだもん)

[モジュール]
基本的にUSBモジュールにあわせていますが、こちらは読み込み、書き出しが同時にできることに注意してください。

  Port (
    CLK : in STD_LOGIC;
    RST : in STD_LOGIC;
    -- こちら側を使う
    RSIO_RD : in STD_LOGIC;     -- read 制御線:1にすると、バッファから1個消す
    RSIO_RData : out STD_LOGIC_VECTOR(7 downto 0);  -- read data
    RSIO_RC : out STD_LOGIC;    -- read 完了線:1の時読んでよい
    RSIO_OVERRUN : out STD_LOGIC;    -- readのOVERRUN時1
    RSIO_WD : in STD_LOGIC;     -- write 制御線:1にすると、データを取り込む
    RSIO_WData : in STD_LOGIC_VECTOR(7 downto 0);   -- write data
    RSIO_WC : out STD_LOGIC;    -- write 完了線:1の時書き込んでよい
    --ledout : out STD_LOGIC_VECTOR(7 downto 0);
    -- RS232Cポート 側につなぐ
    RSRXD : in STD_LOGIC;
    RSTXD : out STD_LOGIC
    );

[使い方]
基本的に、1クロックの中で動作させるためには、RSIO_RDやRSIO_WDを1にした状態で、出てきた信号をチェックしてください。
つまり、readしたいときは、
1.RSIO_RDを1にする
2.次のクロックで、RSIO_RData,RSIO_RCを保存、RSIO_RCをチェックして、1だったら有効なデータである
writeしたいときは、
1.RSIO_WDを1にし、RSIO_WDataにデータを出力する
2.次のクロックで、RSIO_WCをみて、1だったら、データの送信が受理されている

バッファの境界にエラーがある可能性があるので、600KBぐらいの読み書きをテストしてください。

[UCFを書くとき]
RSRXD,RSTXDは、間に電圧を調整する石が入っているかどうかを確認してください。入っている場合は、LVTTLで問題ないらしいです。
配線図を見て、どこにつながっているかを確認してください。
NET RS_TX			LOC=K11 | IOSTANDARD = LVTTL;
NET RS_RX			LOC=J11 | IOSTANDARD = LVTTL;
こんな感じ

もし間に石がない場合、自分で電圧をあわせる必要があります。
RS232Cでは、
1:-12V,
0:+12V
というように、通常とは電圧のHigh,Lowが逆なので注意してください。

[シミュレーションモデル]
rs232ctb2.vhdを見てください。
まず、モジュールの読み込みのところで、echoと書かれているモジュールがありますが、これはrs232c_test.vhd(echo鯖)のテストをするものです。ここをシミュレーションしたいモジュールに置き換えてください。(もちろん下の方も)
次に、62行目辺りのSENDDATAを見てください。その前の行のSENDSIZEの大きさと、ここを書き換えることで、送信内容を書き換えることができます。送信せずに待つなどの機能はないので注意してください。
このモジュールのシミュレーションでOVERRUNがたってしまったときは適宜調整してください。
このまま動かすと、read/writeに55clk/bitかかるので、シミュレーションでは速くするといいでしょう。

[おまけ:RS232Cについて]
RS232Cは基本的に1本ずつの送信線と受信線、それからたくさんの制御線がありますが、ケーブルやメーカーによって制御線の扱いはまちまちなので、基本的に送信線と受信線だけで実装しましょう。(この2本だけで実装できるのがRS232Cの醍醐味)
RS232Cは、以下のような仕様でデータをやり取りします。
通常時'1'
データを送りたいとき:スタートビット('0'),データビット(7--8bit),パリティビット(0--1bit),ストップビット('1')

'0'=+12V
'1'=-12V

送信速度は、当初の規格は9600bpsまでしかありませんでしたが、そのあと、だんだん拡張されて、14400,28800,115200,921600などが設定されました。Teratermある人は、シリアルポートの設定のボーレートを見てください。
PCについているシリアルポートはそんなに性能がよく無いと思います。
Team Sakanayaによると、シリアル <-> USB変換器を使うと、1Mbps(つまり921600か)が出るらしいですが、私は失敗しました。変換機の性能の問題だろうか。
まあ、USB通信は、旧基板でも50Mbps出る計算なので、比にならないです。

[RS232Cモジュールを作るときの注意]
受信は、ある程度ノイズを想定するといいでしょう。
速度は、いきなり最速でやらずに、ある程度遅い速度でやってみるといいでしょう。(自分はここで数時間つぶされた)
送信は意外に適当でおｋみたいです。(速い場合を除く)

まあ、ここ見てね。
https://is2009.sakura.ne.jp/moin.cgi/情報科学実験II/CPU演習/メモ

